#autoload

local giveup='Cannot check validity of ssh-agent settings; assuming OK.'

if ( ! true ); then
  echo 'zsh has ( ! true ) negated subshell bug!'
# Have rewritten the below so this doesn't matter.  Still
# nice to be alerted to it now and again though.
#   echo $giveup
#   return 0
fi

if ! [[ -e /proc ]]; then
  echo "/proc didn't exist!"
  echo $giveup
  return 0
fi

if [[ -z "$SSH_AUTH_SOCK" ]]; then
  echo '$SSH_AUTH_SOCK not set.'
  return 1
fi

sockpid="${SSH_AUTH_SOCK##*/agent.}"
if [[ "$sockpid" == "$SSH_AUTH_SOCK" ]]; then
  echo "Couldn't extract pid from \$SSH_AUTH_SOCK ($SSH_AUTH_SOCK)"
  return 1
fi

if [[ -z "$SSH_AGENT_PID" ]]; then
  # SSH_AGENT_PID not set, but could be due to forwarded agent
  # which only sets SSH_AUTH_SOCK.  In this case, the pid should
  # point to an sshd process.
  if [[ ! -e /proc/$sockpid ]]; then
    echo "\$SSH_AUTH_SOCK ($SSH_AUTH_SOCK) refers to non-existent process"
    return 1
  fi

  grep -q sshd: /proc/$sockpid/cmdline
  return $?
fi

if [[ ! -e /proc/$SSH_AGENT_PID ]]; then
  echo "\$SSH_AGENT_PID set to non-existent pid ($SSH_AGENT_PID)."
  return 1
fi

if [[ ! -e /proc/$SSH_AGENT_PID/cmdline ]]; then
  echo "/proc/$SSH_AGENT_PID/cmdline doesn't exist!"
  return 1
fi

if [[ ! -S $SSH_AUTH_SOCK ]]; then
  echo "\$SSH_AUTH_SOCK set to invalid socket ($SSH_AUTH_SOCK)."
  return 1
fi

grep -q ssh-agent /proc/$SSH_AGENT_PID/cmdline

