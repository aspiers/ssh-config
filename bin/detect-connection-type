#!/usr/bin/perl

use strict;
use warnings;

use File::Path;
use Getopt::Long;
use IO::Select;
use Sh qw(write_to_file);

# We won't record any results until we know we've sent at least this
# many echo requests.
my $MIN_SENT_PACKETS = 10;
my $MAX_SENT_PACKETS = 30;
my $DEADLINE         = 30; # we need this in case a firewall results
                           # in zero replies
my $SELECT_TIMEOUT   = 0.5;
my $TTY_CHECK_EVERY  = 5;  # check tty every N seconds

my %opts = ( verbosity => 1 );

Getopt::Long::Configure('bundling');
GetOptions(
  \%opts,
  'help|h',
  'verbosity|verbose|v:+',
) or usage();

sub usage {
  warn @_, "\n" if @_;

  (my $ME = $0) =~ s,.*/,,;

  die <<EOUSAGE;
Usage: $ME [options] [SRCHOST]
Options:
  -h, --help           Show this help
  -v, --verbose[=N]    Increase [specify] verbosity (defaults to 1)
  -V, --version        Show version
EOUSAGE
}

usage() if @ARGV > 1 or $opts{help};

unless ($ENV{SSH_CONNECTION}) {
  #warn "\$SSH_CONNECTION not set\n";
  exit 1;
}

$ENV{SSH_CONNECTION} =~ s/::ffff://g; # RHEL4 weirdness seen on db9

# Source is the server initiating the remote connection.
# Destination is the server we are running this script on.
my ($src_host, $src_port, $dst_host, $dst_port)
  = split /\s+/, $ENV{SSH_CONNECTION};
$src_host = $ARGV[0] if @ARGV;

my $dir = "$ENV{HOME}/.connection-type/$src_host/$dst_host";

# Better for the caller to decide whether or not detection should
# occur if a guess was previously made.
#-f "$dir/guessed-type" and exit 0;

mkpath($dir);

# facilitate nohup
close(STDIN);

$| = 1;
my $ping_cmd = "ping $src_host";
#my $ping_cmd = "ping -w $DEADLINE $src_host";
debug(2, "Running $ping_cmd");
my $ping;
my $ping_pid = open($ping, "$ping_cmd |")
  or die "Couldn't open(ping $src_host |): $!\n";
my $replies_received = 0;
my $replies_lost = 0;
my $min_sent = 0;
my $last_icmp_seq_received = 0;
my $best = 999999999;
my $worst = 0;
my $avg = -1;
my $total = 0;

my $select = new IO::Select($ping);
my $queue;
my $start_time = time();
my $last_tty_check = time();

while (1) {
  my @ready = $select->can_read($SELECT_TIMEOUT);
  debug(5, "select returned");
  if (@ready) {
    my $fh = $ready[0];
    my $incoming;
    my $out = sysread $fh, $incoming, 1024;
    debug(4, "received [$incoming]");
    $queue .= $incoming;
    debug(4, "queue now [$queue]");
    while ($queue =~ s/(.*?)\n//) {
      handle_output($1);
      debug(4, "queue after handling [$queue]");
    }
  }

  if ($min_sent >= $MAX_SENT_PACKETS) {
    debug(2, "at least $MAX_SENT_PACKETS packets sent; exiting");
    last;
  }
#   if (time() - $last_tty_check > $TTY_CHECK_EVERY) {
#     debug(2, "tty " . `tty`);
#     $last_tty_check = time();
#   }
  if (time() - $start_time > $DEADLINE) {
    debug(2, "deadline of $DEADLINE secs expired");
    finish(1);
  }
}

finish(0);

sub finish {
  my ($exit_code) = @_;
  debug(3, "about to close\n");
  kill 15, $ping_pid or kill 9, $ping_pid;
  close($ping);
  exit defined $exit_code ? $exit_code : 0;
}

sub handle_output {
  $_ = shift @_;
  debug(3, "got ping output [$_]");

  chomp;
  return if /^PING/;

  # required for when ping deadline expires
  return unless length($_);
  return if /ping statistics|packets transmitted|^rtt /;

  if (/^\d+ bytes from (\S+)(?: \((\S+)\))?: icmp_seq=(\d+) ttl=\d+ time=([\d.]+) ms/) {
    handle_echo_reply();
  }
  else {
    warn "Couldn't parse [$_]\n";
  }
}

sub handle_echo_reply {
  $replies_received++;
  my ($seq, $time) = ($3, $4);

  # This is a lower bound, since multiple replies could have been
  # dropped since the last one was received, but we're not ping so we
  # don't know how many it's sent at any given time.
  $replies_lost += $seq - $last_icmp_seq_received - 1;
  $min_sent = $seq;
  my $lost_percent = $min_sent ? $replies_lost / $min_sent * 100 : 0;

  $last_icmp_seq_received = $seq;
  $best = $time if $time < $best;
  $worst = $time if $time > $worst;
  $total += $time;
  $avg = $total / $replies_received;

#   printf "rtt best/avg/worst = %.1f/%.1f/%.1f rcv=%d lost >= %d (%d%%)\n",
#     $best, $avg, $worst, $replies_received, $replies_lost, $lost_percent;

  if ($min_sent >= $MIN_SENT_PACKETS) {
    write_to_file("$dir/best",  $best . "\n");
    write_to_file("$dir/avg",   $avg . "\n");
    write_to_file("$dir/worst", $worst . "\n");
    write_to_file("$dir/sent",  $min_sent . "\n");
    write_to_file("$dir/recvd", $replies_received . "\n");
    write_to_file("$dir/lost",  $replies_lost . "\n");
    write_to_file("$dir/lost%", $lost_percent . "\n");
    my $type = guess_connection_type($best, $lost_percent);
    write_to_file("$dir/guessed-type", $type . "\n");
  }
}

sub guess_connection_type {
  my ($best, $lost_percent) = @_;
  return 'lan'  if $best < 1;
  return 'wifi' if $best < 5;
  return 'near' if $best < 30;
  return 'far';
}

sub debug {
  my $level = shift;
  warn @_, "\n" if $opts{verbosity} >= $level;
}
